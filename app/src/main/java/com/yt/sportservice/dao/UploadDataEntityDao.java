package com.yt.sportservice.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yt.sportservice.entity.UploadDataEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOAD_DATA_ENTITY".
*/
public class UploadDataEntityDao extends AbstractDao<UploadDataEntity, Long> {

    public static final String TABLENAME = "UPLOAD_DATA_ENTITY";

    /**
     * Properties of entity UploadDataEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property AvgHeartrate = new Property(2, String.class, "avgHeartrate", false, "AVG_HEARTRATE");
        public final static Property Heartrate = new Property(3, String.class, "heartrate", false, "HEARTRATE");
        public final static Property StepCounter = new Property(4, String.class, "stepCounter", false, "STEP_COUNTER");
        public final static Property Sleep = new Property(5, String.class, "sleep", false, "SLEEP");
        public final static Property Distance = new Property(6, String.class, "distance", false, "DISTANCE");
        public final static Property Calorie = new Property(7, String.class, "calorie", false, "CALORIE");
        public final static Property Position = new Property(8, String.class, "position", false, "POSITION");
    }


    public UploadDataEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UploadDataEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD_DATA_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" TEXT," + // 1: time
                "\"AVG_HEARTRATE\" TEXT," + // 2: avgHeartrate
                "\"HEARTRATE\" TEXT," + // 3: heartrate
                "\"STEP_COUNTER\" TEXT," + // 4: stepCounter
                "\"SLEEP\" TEXT," + // 5: sleep
                "\"DISTANCE\" TEXT," + // 6: distance
                "\"CALORIE\" TEXT," + // 7: calorie
                "\"POSITION\" TEXT);"); // 8: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD_DATA_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UploadDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String avgHeartrate = entity.getAvgHeartrate();
        if (avgHeartrate != null) {
            stmt.bindString(3, avgHeartrate);
        }
 
        String heartrate = entity.getHeartrate();
        if (heartrate != null) {
            stmt.bindString(4, heartrate);
        }
 
        String stepCounter = entity.getStepCounter();
        if (stepCounter != null) {
            stmt.bindString(5, stepCounter);
        }
 
        String sleep = entity.getSleep();
        if (sleep != null) {
            stmt.bindString(6, sleep);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(7, distance);
        }
 
        String calorie = entity.getCalorie();
        if (calorie != null) {
            stmt.bindString(8, calorie);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(9, position);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UploadDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String avgHeartrate = entity.getAvgHeartrate();
        if (avgHeartrate != null) {
            stmt.bindString(3, avgHeartrate);
        }
 
        String heartrate = entity.getHeartrate();
        if (heartrate != null) {
            stmt.bindString(4, heartrate);
        }
 
        String stepCounter = entity.getStepCounter();
        if (stepCounter != null) {
            stmt.bindString(5, stepCounter);
        }
 
        String sleep = entity.getSleep();
        if (sleep != null) {
            stmt.bindString(6, sleep);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(7, distance);
        }
 
        String calorie = entity.getCalorie();
        if (calorie != null) {
            stmt.bindString(8, calorie);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(9, position);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UploadDataEntity readEntity(Cursor cursor, int offset) {
        UploadDataEntity entity = new UploadDataEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avgHeartrate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // heartrate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stepCounter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sleep
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // distance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // calorie
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UploadDataEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvgHeartrate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeartrate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStepCounter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSleep(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDistance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCalorie(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPosition(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UploadDataEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UploadDataEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UploadDataEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
